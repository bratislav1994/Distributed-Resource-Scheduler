///////////////////////////////////////////////////////////
//  Generator.cs
//  Implementation of the Class Generator
//  Generated by Enterprise Architect
//  Created on:      27-dec-2016 11.40.03
//  Original author: Gogic
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Threading;

namespace CommonLibrary
{
    [DataContract]
    public class Generator : IdentifiedObject, INotifyPropertyChanged
    {

        private double activePower;
        private double basePoint;
        private bool hasMeasurment;
        private double pmax;
        private double pmin;
        private double price;
        private double setPoint;
        private GeneratorType generatorType;
        private WorkingMode workingMode;
        private string groupID;
        private static object objLock = new object();

        public Generator()
        {

        }

        [DataMember]
        public double ActivePower
        {
            get
            {
                return activePower;
            }
            set
            {
                lock (objLock)
                {
                    activePower = value;
                }
                RaisePropertyChanged("activePower");
            }
        }

        [DataMember]
        public double BasePoint
        {
            get
            {
                return basePoint;
            }
            set
            {
                basePoint = value;
                RaisePropertyChanged("basePoint");
            }
        }

        [DataMember]
        public bool HasMeasurment
        {
            get
            {
                return hasMeasurment;
            }
            set
            {
                hasMeasurment = value;
                RaisePropertyChanged("hasMeasurment");
            }
        }

        [DataMember]
        public double Pmax
        {
            get
            {
                return pmax;
            }
            set
            {
                pmax = value;
                RaisePropertyChanged("pmax");
            }
        }

        [DataMember]
        public double Pmin
        {
            get
            {
                return pmin;
            }
            set
            {
                pmin = value;
                RaisePropertyChanged("pmin");
            }
        }

        [DataMember]
        public double Price
        {
            get
            {
                return price;
            }
            set
            {
                price = value;
                RaisePropertyChanged("price");
            }
        }

        [DataMember]
        public double SetPoint
        {
            get
            {
                return setPoint;
            }
            set
            {
                setPoint = value;
                Thread SetActivePowerThread = new Thread(SetActivePower);
                SetActivePowerThread.Start();
                RaisePropertyChanged("setPoint");
            }
        }

        [DataMember]
        public GeneratorType GeneratorType
        {
            get
            {
                return generatorType;
            }

            set
            {
                generatorType = value;
                RaisePropertyChanged("generatorType");
            }
        }

        [DataMember]
        public WorkingMode WorkingMode
        {
            get
            {
                return workingMode;
            }

            set
            {
                workingMode = value;
                RaisePropertyChanged("workingMode");
            }
        }

        [DataMember]
        public string GroupID
        {
            get
            {
                return groupID;
            }

            set
            {
                groupID = value;
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        private void RaisePropertyChanged(string propName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propName));
            }
        }

        private void SetActivePower()
        {
            while (true)
            {
                Thread.Sleep(2000);
                this.activePower = this.setPoint;
            }
        }
    }//end Generator
}